From: "Saved by Internet Explorer 11"
Subject: Christoph Schwarzweller: Scheme
Date: Fri, 4 Dec 2015 13:15:22 +0100
MIME-Version: 1.0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: https://inf.ug.edu.pl/~schwarzw/zadania/ZadScheme2015.html
X-MimeOLE: Produced By Microsoft MimeOLE V10.0.10011.16384

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><META content=3D"IE=3D5.0000" =
http-equiv=3D"X-UA-Compatible">
<TITLE>Christoph Schwarzweller: Scheme</TITLE>=20
<META http-equiv=3D"Content-Type" content=3D"text/html; =
charset=3Dutf-8"><LINK href=3D"../cs.css"=20
rel=3D"stylesheet" type=3D"text/css">=20
<META name=3D"GENERATOR" content=3D"MSHTML 11.00.10586.17"></HEAD>=20
<BODY class=3D"main"><BR>
<H2> Zadania (Scheme) </H2>
<OL>
  <LI>  Jakie s=C4=85 warto=C5=9Bci nast=C4=99puj=C4=85cych =
wyra=C5=BCe=C5=84? <BR><BR>
<PRE>=3D=3D&gt; 10 <BR><BR>=0A=
=3D=3D&gt; (+ 5 3 4) <BR><BR>=0A=
=3D=3D&gt; (- 9 1) <BR><BR>=0A=
=3D=3D&gt; (/ 6 2) <BR><BR>=0A=
=3D=3D&gt; (+ ( * 2 4) (- 4 6)) <BR><BR>=0A=
=3D=3D&gt; (let ((a 1) (b 2)) (+ a b (* a b))) <BR><BR>=0A=
=3D=3D&gt; a <BR><BR>=0A=
=3D=3D&gt; (define a 3) <BR><BR>=0A=
=3D=3D&gt; (define b (+ a 1)) <BR><BR>=0A=
=3D=3D&gt; (+ a b (* a b)) <BR><BR>=0A=
=3D=3D&gt; (=3D a b) <BR><BR>=0A=
=3D=3D&gt; (if (and (&gt; b a) (&lt; b (* a b))) =0A=
        b =0A=
        a) <BR><BR>=0A=
=3D=3D&gt; (cond ((=3D a 4) 6) =0A=
          ((=3D b 4) (+ 6 7 a))=0A=
          (else    25))=0A=
</PRE>
  <LI>  Prosz=C4=99 napisa=C4=87 funkcje <TT>nwd a b</TT> oraz <TT>nww a =
b</TT>, kt=C3=B3rych=20
  warto=C5=9Bciami s=C4=85 najwi=C4=99kszy wsp=C3=B3lny dzielnik i =
najmniejsza wsp=C3=B3lna=20
  wielokrotno=C5=9B=C4=87. <BR><BR>
  <LI>Prosz=C4=99 napisa=C4=87 funkcj=C4=99 <TT>(new.&lt; x y)</TT>, =
<TT>(new.&gt; x y)</TT>,=20
  <TT>(new.=3D x y)</TT>, <TT>(new.&lt;=3D x y)</TT>, <TT>(new.&gt;=3D x =
y)</TT> oraz=20
  <TT>(new.&lt;&gt; x y)</TT>. Nale=C5=BCy z wbudowanych funkcji =
u=C5=BCywa=C4=87 wy=C5=82=C4=85cznie=20
  funckcj=C4=99 <TT>&lt;</TT> (oraz predykaty oczywi=C5=9Bcie). <BR><BR>
  <LI> Prosz=C4=99 napisa=C4=87 funkcj=C4=99 <TT>(same-values? p1 p2 x =
y)</TT>, kt=C3=B3rej warto=C5=9B=C4=87=20
  jest <TT>#t</TT>, je=C5=BCeli <TT>(p1 x y)</TT> i <TT>(p2 x y)</TT> =
maj=C4=85 t=C4=85 sam=C4=85=20
  warto=C5=9B=C4=87 i <TT>#f</TT> w przecziwnym przypadku.=20
<PRE>Przyk=C5=82ady: =3D=3D&gt; (same-values? =3D new.=3D 3 1)=0A=
           #t=0A=
           =3D=3D&gt; (same-values? &lt; &gt; 2 3)=0A=
           #f=0A=
</PRE>
  <LI> Prosz=C4=99 napisa=C4=87 funkcje <TT>(odd? n)</TT> oraz =
<TT>(even? n)</TT>, kt=C3=B3re=20
  sprawdzaj=C4=85, czy liczba naturalna <TT>n</TT> jest nieparzysta =
wzgl=C4=99dnie=20
  parzysta. Nale=C5=BCy u=C5=BCywa=C4=87 wy=C5=82=C4=85cznie funkcje =
<TT>#t</TT>, <TT>#f</TT>,=20
  <TT>zero?</TT> oraz "<TT>-1</TT>".<BR><BR>
  <LI> Prosz=C4=99 napisa=C4=87 rekurencyjn=C4=85 oraz iteracyn=C4=85 =
funkcj=C4=99 <TT>(fib n)</TT>,=20
  kt=C3=B3ra obliczy <TT>n</TT>-t=C4=85 liczb=C4=99 Fibonacci. <BR><BR>
  <LI>Pot=C4=99gowanie b^e mo=C5=BCna szybko wykona=C4=87 =
u=C5=BCywaj=C4=85c b^e =3D (b^(e/2))^2. Prosz=C4=99=20
  napisa=C4=87 rekurencyjn=C4=85 oraz iteracyjn=C4=85 funkcj=C4=99 =
<TT>(exp b e)</TT> na podstawie=20
  tej w=C5=82a=C5=9Bciwo=C5=9Bci. U=C5=BCywaj=C4=85c model =
=C5=9Brodowiska, prosz=C4=99 pokazywa=C4=87, jak wyra=C5=BCenie=20
  <TT>(exp 2 6)</TT> zostaje ewaluowane. <BR><BR>
  <LI> Niech b=C4=99d=C4=85 dane nast=C4=99puj=C4=85ce definicje =
funkcji.=20
<PRE>(define m 1)             (define n 1)=0A=
(define (p m)            (define (q n)=0A=
   (pp 5))                  (define (qq x)=0A=
(define (pp x)                 (+ x n))=0A=
   (+ x m))                 (qq 5))=0A=
</PRE>=20
  Jakie s=C4=85 warto=C5=9Bci wyrazie=C5=84 <TT>(p 11)</TT> i <TT>(q =
11)</TT>?  Prosz=C4=99=20
  wyt=C5=82umaczy=C4=87 wyniki u=C5=BCywaj=C4=85c model =C5=9Brodowiska. =
<BR><BR>
  <LI> Prosz=C4=99 napisa=C4=87 funkcj=C4=99 <TT>(product term a next =
b)</TT> analogicznie do=20
  funkcji <TT>sum</TT> z wyk=C5=82adu. Prosz=C4=99 pokazywa=C4=87, jak =
u=C5=BCywaj=C4=85c <TT>=20
  product</TT> mo=C5=BCna definiowa=C4=87 funkcj=C4=99 <TT>silnia</TT> =
oraz przybli=C5=BCa=C4=87 <FONT=20
  face=3D"Symbol" size=3D"2">p</FONT> na podstawie formu=C5=82y &nbsp;   =
<FONT face=3D"Symbol"=20
  size=3D"2">p</FONT>/4 =3D 2 =C2=B7 4 =C2=B7 4 =C2=B7 6 =C2=B7 6 =C2=B7 =
8 =C2=B7=C2=B7=C2=B7 / 3 =C2=B7 3 =C2=B7 5 =C2=B7 5 =C2=B7 7 =C2=B7 7 =
=C2=B7=C2=B7=C2=B7 .=20
  <BR><BR>
  <LI> Prosz=C4=99 napisa=C4=87 funkcj=C4=99 <TT>(accumulate combiner =
null-value term a next=20
  b)</TT>, kt=C3=B3ra jest uog=C3=B3lnieniem funkcji <TT>sum</TT> i =
<TT>prod</TT>.
   Argumenty <TT>term</TT>, <TT>next</TT>, <TT>a</TT> i <TT>b</TT> =
zachowuj=C4=85 to=20
  same znaczenie ni=C5=BC w funkcjach <TT>sum</TT> i <TT>prod</TT>.  =20
  <TT>combiner</TT> jest dwuargumentow=C4=85 funkcj=C4=85, kt=C3=B3ra =
opisuja, jak <TT>(term=20
  a)</TT> zostaje dodane do akkumulacji dalszych term=C3=B3w.  =
<TT>null-value</TT>=20
  jest warto=C5=9Bci=C4=85 inicjaln=C4=85 do u=C5=BCywania w =
ko=C5=84cowym przypadku. <BR>Prosz=C4=99=20
  pokazywa=C4=87, jak mo=C5=BCna definiowa=C4=87 funkcje <TT>sum</TT> i =
<TT>prod</TT> u=C5=BCywaj=C4=85c=20
  <TT>accumulate</TT>. <BR><BR>
  <LI> Nawet funkcj=C4=99 <TT>accumulate</TT> mo=C5=BCna dalej =
uog=C3=B3lni=C4=87. Prosz=C4=99 napisa=C4=87=20
  funkcj=C4=99 <TT>filter-accumulate</TT>, kt=C3=B3ra ma dodatkowy =
argument <TT>pred</TT>.=20
   <TT>pred</TT> jest (jednoargumentowym) predykatem a=20
  <TT>filter-accumulate</TT> dodaje <TT>(term a)</TT> do wynika tylko, =
je=C5=BCeli=20
  <TT>a</TT> spe=C5=82nie predykat <TT>pred</TT>.  =
<BR>U=C5=BCywaj=C4=85c=20
  <TT>filter-accumulate</TT> prosz=C4=99 obliczy=C4=87 sum=C4=99 =
kwadrat=C3=B3w liczb pierwszych w=20
  interwale [<TT>a</TT>,<TT>b</TT>] oraz produkt wszystkich liczb =
naturalnych=20
  <TT>i</TT> mniejsze ni=C5=BC <TT>n</TT>, takie =C5=BCe <TT> nwd(i,n) =
=3D 1</TT>. <BR><BR>
  <LI> Niech b=C4=99dzie dana nast=C4=99puj=C4=85ca definicja funkcji =
<TT>(comb f g)</TT>.=20
<PRE>(define (comb f g)=0A=
   (lambda (x) (f (g x))))=0A=
</PRE>U=C5=BCywaj=C4=85c model=20
  =C5=9Bdowiska, prosz=C4=99 pokazywa=C4=87 jak wyra=C5=BCenie =
<TT>((comb square double) 5)</TT>=20
  zostajy ewaluowane. <BR><BR>
  <LI> Prosz=C4=99 napisa=C4=87 funkcj=C4=99 <TT>(deriv f dx)</TT>, =
kt=C3=B3r=C4=85 warto=C5=9B=C4=87 jest funkcj=C4=85,=20
  kt=C3=B3ra przybli=C5=BCa funkcj=C4=99 <TT>f'</TT> u=C5=BCywaj=C4=85c =
formu=C5=82=C4=99=20
<PRE> Df(x) =3D (f(x+dx) - f(x)) / dx.=0A=
</PRE>
<PRE>Przyk=C5=82ad:  =3D=3D&gt; ((derive cube .001) 5)=0A=
           75.015=0A=
</PRE>
  <LI> Prosz=C4=99 napisa=C4=87 nast=C4=99puj=C4=85ce funkcje dla list: =
<BR><BR>a) <TT>(append l=20
  m)</TT>, kt=C3=B3ra konkatenuje listy <TT>l</TT> i =
<TT>m</TT>.<BR><BR>b)=20
  <TT>(reverse l)</TT>, kt=C3=B3ra obr=C3=B3ci list=C4=99 =
<TT>l</TT>.<BR><BR>c) <TT>(last=20
  l)</TT>, kt=C3=B3ra znajduje ostatni element w liscie =
<TT>l</TT>.<BR><BR>d)=20
  <TT>(delete x l)</TT>, kt=C3=B3ra skasuje element <TT>x</TT> z listy=20
  <TT>l</TT>.<BR><BR>
  <LI> a) Prosz=C4=99 napisa=C4=87 funkcj=C4=99 <TT>(square-list =
l)</TT>, kt=C3=B3rej warto=C5=9B=C4=87 jest=20
  list=C4=85 kwadrat=C3=B3w element=C3=B3w listy <TT>l</TT>. <BR><BR>b) =
Prosz=C4=99 napisa=C4=87 funkcj=C4=99=20
  <TT>(mapf f l)</TT>, kt=C3=B3rej warto=C5=9Bci=C4=85 jest lista =
warto=C5=9Bci <TT>f(e)</TT> dla=20
  wszystkich element=C3=B3w <TT>e</TT> w liscie <TT>l</TT>. <BR><BR>
  <LI>  Prosz=C4=99 zdefiniowa=C4=87 funkcj=C4=99 <TT>(iter f n)</TT>, =
kt=C3=B3rej warto=C5=9Bci=C4=85 jest=20
  funkcja <TT>f<SUP>n</SUP></TT>. <BR><BR>
  <LI> U=C5=BCywaj=C4=85c funkcj=C4=99 <TT>fold</TT> prosz=C4=99 =
zdefiniowa=C4=87 funkcje <BR><BR>     a)=20
  <TT>(prod l)</TT><BR><BR>     b) <TT>(length l)</TT><BR><BR>     c)=20
  <TT>(member x l)</TT><BR><BR>     c) <TT>(delete l)</TT> <BR><BR>     =
d)=20
  <TT>(reverse l)</TT><BR><BR><!--=0A=
<li> Prosz&#x0119; zdefiniowa&#263; funkcj&#x0119; <tt>search</tt>, =
kt&#x00F3;ra znajduje punkt zerowy danej funkcji <tt>f</tt>. <br><br>=0A=
-->=20
  <LI> Prosz=C4=99 zdefiniowa=C4=87 arytmetyk=C4=99 liczb wymiernich na =
podstawie liczb=20
  ca=C5=82kowitych. <BR><BR>
  <LI> Obiekty nie b=C4=99d=C4=85ce parami nazywaj=C4=85 si=C4=99 atomy. =
Prosz=C4=99 napisa=C4=87 funkcj=C4=99,=20
  kt=C3=B3ra <BR><BR>a) sprawdza, czy w liscie <TT>l</TT> znajduj=C4=85 =
si=C4=99 wy=C5=82=C4=85cznie=20
  atomy. <BR><BR>b) obliczy, ile jest atom=C3=B3w w liscie =
<TT>l</TT>.<BR><BR>
  <LI> Prosz=C4=99 napisa=C4=87 funkcj=C4=99 <TT>(member2 x l)</TT>, =
kt=C3=B3 sprawdza, czy gdzie=C5=9B w=20
  liscie <TT>l</TT> znajduje si=C4=99 <TT>x</TT>.=20
<PRE>Przyk=C5=82ady: =3D=3D&gt; (member2 'a '(b (c a) b))=0A=
           #t=0A=
           =3D=3D&gt; (member2 '(a) '(b (c (a) d) e))=0A=
           #t=0A=
           =3D=3D&gt; (member2 '(a) '(b c a))=0A=
           #f=0A=
</PRE>
  <LI> Prosz=C4=99 powi=C4=99ksza=C4=87 funkcj=C4=99 <TT>deriv</TT> tak, =
=C5=BCeby te=C5=BC mog=C5=82a traktowa=C4=87=20
  termy typu <TT>u^n</TT> (na podstawie <TT> d(u^n) / dx =3D n * u^(n-1) =
* du / dx=20
  </TT>). <BR><BR>
  <LI> Prosz=C4=99 implementowa=C4=87 arytmetyk=C4=99 liczb zespolonych =
<BR><BR>a) u=C5=BCywaj=C4=85c=20
  metod=C4=99 "manifest types". <BR><BR>b) u=C5=BCywaj=C4=85c =
metod=C4=99 "message passing".=20
<BR><BR>
  <LI> W <TT>Scheme</TT> te=C5=BC mo=C5=BCna pisa=C4=87 funkcje z =
dowoln=C4=85 ilo=C5=9Bci=C4=85 argument=C3=B3w:=20
<PRE> (define (f x y z . l) (...))=0A=
</PRE>oznacza, =C5=BCe funkcja <TT> f </TT> ma=20
  conajmniej trzy argumenty (<TT>x</TT>,<TT>y</TT> i <TT> z</TT>). =
Je=C5=BCeli <TT> f=20
  </TT> dostaje wi=C4=99cej ni=C5=BC trzy  argumenty, dodatkowe =
argumenty zostaj=C4=85 zapisane=20
  do listy <TT> l </TT>. <BR><BR> a)  Prosz=C4=99 napisa=C4=87 =
funkcj=C4=99 <TT>plus</TT>,=20
  kt=C3=B3ra podsumuje dowoln=C4=85 ilo=C5=9B=C4=87 liczb.<BR><BR> b) =
Prosz=C4=99 napisa=C4=87 funkcj=C4=99=20
  <TT>par</TT> dla dowolniej ilo=C5=9Bci (jednoargumentowych) funkcji =
f<SUB>i</SUB>.=20
  Warto=C5=9B=C4=87 funkcji <TT>par</TT> jest (jednoargumentow=C4=85) =
funkcj=C4=85, kt=C3=B3ra dla=20
  argumenta <TT>x</TT> obliczy list=C4=99 wszystkich=20
  <BR>&nbsp;&nbsp;&nbsp;&nbsp;warto=C5=9Bci <TT>f<SUB>i</SUB>(x)</TT>. =20
<PRE>&nbsp;&nbsp;Przyk=C5=82ady: =3D=3D&gt; ((par id square cube) 3)=0A=
             (3 9 27) =0A=
             =3D=3D&gt; ((par double double) 5)=0A=
             (10 10)=0A=
</PRE>
  <LI> Dlaczego wyra=C5=BCenie <TT>if</TT> nie mo=C5=BCna sam =
definiowa=C4=87 w nast=C4=99puj=C4=85cy=20
  spos=C3=B3b?=20
<PRE>(define (new-if warunek alternatywa1 alternatywa2)=0A=
   (cond (warunek alternatywa1)=0A=
         (else    alternatywa2)))=0A=
</PRE>
  <LI> Prosz=C4=99 napisa=C4=87 funkcj=C4=99 <TT>(ewal wyra=C5=BCenie =
warto=C5=9Bci)</TT>, kt=C3=B3ra oblicy=20
  wynik dla wyra=C5=BCe=C5=84 boolowskich. <TT> wyra=C5=BCenie </TT> =
jest list=C4=85, kt=C3=B3rej=20
  pierwszym elementem jest "typ" wyra=C5=BCenia, a =
nast=C4=99pne<BR>elementy tej listy, to=20
  podwyra=C5=BCenia; na przyk=C5=82ad lista <TT>'(and x (not y))</TT> =
reprezentuje=20
  wyra=C5=BCenie <TT>x=E2=88=A7=C2=ACy</TT>. <TT> warto=C5=9Bci</TT> =
jest list=C4=85, w kt=C3=B3rej znaduj=C4=85 si=C4=99=20
  warto=C5=9Bci zmiennych.=20
<PRE>Przyk=C5=82ady: =3D=3D&gt; (define w '((x . #f) (y . #t) (z . #f)))=0A=
           w=0A=
           =3D=3D&gt; (ewal '(and y (not x)) w)=0A=
           #t=0A=
           =3D=3D&gt; (ewal '(and y (and (not x) z))) w)=0A=
           #f=0A=
           =3D=3D&gt; (ewal '(and y 1) w)=0A=
           #t=0A=
</PRE>
  <LI> Niech <TT> a<SUB>1</SUB></TT>,  <TT>a<SUB>2</SUB></TT>, ... =
b=C4=99d=C4=85=20
  wyra=C5=BCenami. Regu=C5=82a jest dana w formie=20
  <TT>{a<SUB>i<SUB>1</SUB></SUB>,...a<SUB>i<SUB>n</SUB></SUB>} =E2=86=92 =

  a<SUB>i</SUB></TT>.  Regu=C5=82a jest faktem, je=C5=BCeli <TT>n</TT> =
=3D 0. <BR> Niech=20
  <TT>R</TT> b=C4=99dzie zbiorem regu=C5=82. Wyra=C5=BCenie <TT>a</TT> =
jest prawdziwe w=20
  <TT>R</TT>, je=C5=BCeli <BR><BR>(i) <TT>a</TT> jest faktem lub =
<BR><BR>(ii)=20
  istnieje regu=C5=82a =
<TT>{a<SUB>i<SUB>1</SUB></SUB>,...a<SUB>i<SUB>n</SUB></SUB>} =E2=86=92=20
  a<SUB>i</SUB></TT> w <TT>R</TT>, taka =C5=BCe <TT>a<SUB>i</SUB></TT> =
=3D <TT>a</TT>=20
  oraz <TT>a<SUB>i<SUB>1</SUB></SUB></TT>,... =
<TT>a<SUB>i<SUB>n</SUB></SUB></TT>=20
  s=C4=85 prawdziwe w <TT>R</TT>.<BR><BR>Prosz=C4=99 napisa=C4=87 =
funkcj=C4=99 <TT>(valid a R)</TT>,=20
  kt=C3=B3ra sprawdza, czy wyra=C5=BCenie <TT>a</TT> jest prawdziwe w =
<TT>R</TT>. Prosz=C4=99=20
  u=C5=BCy=C4=87 przy tym reprezentacje <TT>(fact a<SUB>i</SUB>)</TT> =
dla faktu oraz=20
  <TT>(rule (a<SUB>i<SUB>1</SUB></SUB> ... a<SUB>i<SUB>n</SUB></SUB>)=20
  a<SUB>i</SUB>)</TT> <BR>dla regu=C5=82y=20
  <TT>{a<SUB>i<SUB>1</SUB></SUB>,...a<SUB>i<SUB>n</SUB></SUB>} =E2=86=92 =

  a<SUB>i</SUB></TT>. =20
<PRE> Przyk=C5=82ad:=0A=
 =3D=3D&gt; (define R '((fact a<SUB>1</SUB>)=0A=
                 (rule (a<SUB>1</SUB>) a<SUB>2</SUB>)=0A=
                 (rule (a<SUB>1</SUB> a<SUB>5</SUB>) a<SUB>3</SUB>)=0A=
                 (rule (a<SUB>2</SUB>) a<SUB>5</SUB>)=0A=
                 (rule (a<SUB>2</SUB> a<SUB>6</SUB>) a<SUB>4</SUB>)))=0A=
 R=0A=
 =3D=3D&gt; (valid 'a1 R)=0A=
 #t=0A=
 =3D=3D&gt; (valid 'a3 R)=0A=
 #t=0A=
 =3D=3D&gt; (valid 'a4 R)=0A=
 #f =0A=
</PRE>
  <LI> a) Prosz=C4=99 napisa=C4=87 funkcj=C4=99 <TT>(make-konto =
balance)</TT>, kt=C3=B3ra generuje=20
  nowe konto z <TT>balance</TT> z=C5=82otymi. Na koncie maj=C4=85 =
by=C4=87 mo=C5=BCliwie nast=C4=99puj=C4=85ce=20
  operacje: Podj=C4=99cie, wp=C5=82acenie oraz =
<BR>&nbsp;&nbsp;&nbsp;&nbsp;informacje, ile=20
  jest na koncie. <BR><BR>b) Prosz=C4=99 modifykowa=C4=87 funkcj=C4=99 =
<TT>make-konto</TT> z=20
  ci=C4=99ci a), taka =C5=BCe ona generuje konta z has=C5=82ami, tzn. =
operacje zostaj=C4=85=20
  wykonywane tylko, je=C5=BCeli u=C5=BCytkownik u=C5=BCywa prawdziwe =
has=C5=82o.=20
<PRE> Przyk=C5=82ad: =3D=3D&gt; (define konto (make-konto 100 =
'has=C5=82o))=0A=
           konto=0A=
           =3D=3D&gt; ((konto 'has=C5=82o 'withdraw) 40)=0A=
           60=0A=
           =3D=3D&gt; ((konto 'inne-has=C5=82o 'withdraw) 20)=0A=
           z=C5=82e has=C5=82o=0A=
</PRE>
  <LI>  Prosz=C4=99 napisa=C4=87 funkcj=C4=99 <TT>(counting-version =
f)</TT>, kt=C3=B3ra ma=20
  jedonargumentow=C4=85 funkcj=C4=99 <TT>f</TT> jako argument. =
Warto=C5=9B=C4=87 tej funkcji jest=20
  now=C4=85 jednoargumentow=C4=85 funkcj=C4=99, kt=C3=B3ra liczy, ile =
razy <BR>funkcja <TT>f</TT>=20
  zosta=C5=82a u=C5=BCywana.=20
<PRE> Przyk=C5=82ad: =3D=3D&gt; (define sq (counting-version square))=0A=
           sq=0A=
           =3D=3D&gt; (sq 5)=0A=
           25=0A=
           =3D=3D&gt; (sq 7)=0A=
           49=0A=
           =3D=3D&gt; (sq 'ile)=0A=
           2=0A=
           =3D=3D&gt; (sq 'reset)=0A=
           0=0A=
           =3D=3D&gt; (sq 'ile)=0A=
           0=0A=
</PRE>
  <LI>  Prosz=C4=99 napisa=C4=87 destruktywn=C4=85 wersj=C4=99 =
<TT>append!</TT> funkcji=20
  <TT>append</TT>. Jakie s=C4=85 warto=C5=9Bci nast=C4=99puj=C4=85cych =
wyra=C5=BCe=C5=84?=20
<PRE>=3D=3D&gt; (define x '(a b)) <BR>=0A=
=3D=3D&gt; (define y '(c d)) <BR>=0A=
=3D=3D&gt; (append x y) <BR>=0A=
=3D=3D&gt; (cdr x) <BR>=0A=
=3D=3D&gt; (append! x y) <BR>=0A=
=3D=3D&gt; (mcdr x) =0A=
</PRE>
  <LI> Co robi nast=C4=99puj=C4=85ca funkcja?=20
<PRE> (define (co=C5=9B x)=0A=
    (define (loop x y)=0A=
       (if (null? x)=0A=
           y=0A=
           (let ((temp (mcdr x)))=0A=
              (set-mcdr! x y)=0A=
              (loop temp x))))=0A=
    (loop x '()))=0A=
</PRE>
  Prosz=C4=99 narysowa=C4=87 diagramy dla wyra=C5=BCe=C5=84 <TT>(define =
v '(a b c d))</TT> i=20
  <TT>(define w (co=C5=9B v))</TT>i po ich wykonywaniu. <BR><BR>
  <LI>  Prosz=C4=99 napisa=C4=87 funkcj=C4=99 <TT>(count-boxes l)</TT>, =
kt=C3=B3ra obliczy, ile jest=20
  par w liscie <TT>l</TT>.=20
<PRE> Przyk=C5=82ad:  =3D=3D&gt; (define x '(a b c))=0A=
            x=0A=
            =3D=3D&gt; (define z (cons x x))=0A=
            z=0A=
            =3D=3D&gt; (count-boxes x)=0A=
            3=0A=
            =3D=3D&gt; (count-boxes (append x x))=0A=
            6=0A=
            =3D=3D&gt; (count-boxes z)=0A=
            4=0A=
</PRE>
  <LI> Na wyk=C5=82adzie zosta=C5=82 podyskutowany <A =
href=3D"https://inf.ug.edu.pl/~schwarzw/zadania/simulator.scm">=20
  simulator</A> uk=C5=82ad=C3=B3w logicznych. <BR><BR>a) Prosz=C4=99 =
napisa=C4=87 funkcj=C4=99=20
  <TT>(or-gate o1 o2 output)</TT>, kt=C3=B3ra generuje bramk=C4=99 =
<TT>or</TT>. <BR><BR>b)=20
   Prosz=C4=99 napisa=C4=87 funkcj=C4=99 <TT>(full-adder a b c-in sum =
c-out)</TT>, kt=C3=B3ra=20
  generuje (pe=C5=82ny) sumator. <BR><BR>c) Ripple-carry-adder, to =
uk=C5=82ad, kt=C3=B3ry=20
  sumuje dwie liczbe binarne <TT>a<SUB>n</SUB> ... a<SUB>1</SUB></TT> i=20
  <TT>b<SUB>n</SUB> ... b<SUB>1</SUB></TT>. Wynik sumacji, to <TT>n</TT> =
bit=C3=B3w=20
  <TT>s<SUB>n</SUB> ... s<SUB>1</SUB></TT> oraz jeden bit <TT>c</TT> =
(carry). =20
  <BR>  &nbsp;&nbsp;&nbsp;&nbsp;Prosz=C4=99 napisa=C4=87 funkcj=C4=99 =
<TT>(ripple-carry-adder A=20
  B S c)</TT>, kt=C3=B3ra generuje takiego sumatora. Argumenty =
<TT>A</TT>, <TT>B</TT>=20
  i <TT>S</TT> s=C4=85 listami kabl=C3=B3w  <TT>a<SUB>i</SUB></TT>, =
<TT>b<SUB>i</SUB></TT>=20
  i <TT>s<SUB>i</SUB></TT>,  a <TT>c</TT> kablem carry. <BR>
  &nbsp;&nbsp;&nbsp;&nbsp;Prosz=C4=99 wygenerowa=C4=87 =
ripple-carry-adder dla <TT>n</TT> =3D=20
  4 bity i z nim obliczy=C4=87 1011 + 0011 oraz 1011 + 0110. =
<BR><BR><!-- =0A=
<li> a) Niech b&#x0119;d&#x0105; dane nast&#x0119;puj&#x0105;ce =
definicje.=0A=
<pre> (define litery '(a b c))=0A=
  (define liczbe '(1 2 3))=0A=
</pre>=0A=
&#160;&#160;&#160;&#160;Jaka jest warto&#x015B;&#x0107; wyra&#x017C;enia =
<tt> (append litery liczby)</tt>, a jakie warto&#x015B;ci maj&#x0105; =
potem <tt> litery </tt> i <tt>liczby</tt>? <br>=0A=
&#160;&#160;&#160;&#160;Jaka jest warto&#x015B;&#x0107; wyra&#x017C;enia =
<tt> (append! litery liczby)</tt>, a jakie warto&#x015B;ci maj&#x0105; =
potem <tt> litery </tt> i <tt>liczby</tt>? <br><br>=0A=
b) Prosz&#x0119; narysowa&#x0107; diagramy dla warto&#x015B;ci =
<tt>litery</tt> oraz <tt>litery-litery</tt> po wykonywaniu =0A=
<pre> (define litery '(a b c))=0A=
 (define litery-litery (append! litery literty))=0A=
</pre>=0A=
&#160;&#160;&#160;&#160;Co si&#x0119; sta&#x0142;o, je&#x017C;eli teraz =
wyra&#x017C;enie <tt>(append! litery '())</tt> zostaje =
wykonywane?<br><br>=0A=
c) Niech b&#x0119;d&#x0105; dane nast&#x0119;puj&#x0105;ce definicje.=0A=
<pre> (define (test  z) (append '(test wykonywane z) (list z)))=0A=
 (define (test! z) (append! '(test wykonywane z) (list z)))=0A=
</pre>=0A=
&#160;&#160;&#160;&#160;Jakie s&#x0105; warto&#x015B;ci =
wyra&#x017C;e&#x0144;=0A=
<tt>(test 1)</tt>, <tt>(test 2)</tt> i <tt>(test 3)</tt> wykonywane w =
tej kolejno&#x015B;ci? =0A=
<br>&#160;&#160;&#160;&#160;Jakie s&#x0105; warto&#x015B;ci =
wyra&#x017C;e&#x0144;=0A=
<tt>(test! 1)</tt>, <tt>(test! 2)</tt> i <tt>(test! 3)</tt> wykonywane w =
tej kolejno&#x015B;ci?=0A=
<br><br>=0A=
-->=20
  </LI></OL></BODY></HTML>
